#import time 
#ini = time.time()
def topDown(obj, capacity):
  if((capacity == 0) or (obj == objects)): 
    memo[obj][capacity] = 0
    return 0
  
  if(memo[obj][capacity] != -1): return memo[obj][capacity]
  
  if(weights[obj] > capacity):
    memo[obj][capacity] = topDown(obj + 1, capacity)
  else:
    put = prices[obj] + topDown(obj + 1, capacity - weights[obj])
    notPut = topDown(obj + 1, capacity)
    
    if(put > notPut):
      memo[obj][capacity] = put
    else:
      memo[obj][capacity] = notPut
  
  return memo[obj][capacity]
  
#def bottomUp(obj, capacity):
  
testCases = int(raw_input())

for i in xrange(testCases):
  prices = []
  weights = []
  memo = []
  
  objects = int(raw_input())
  memo = [[-1] * 100 for x in xrange(objects + 1)]
        
  for j in xrange(objects):
    auxPrice, auxWeight = map(int, raw_input().split())
    prices.append(auxPrice)
    weights.append(auxWeight)
      
  peoples = int(raw_input())
  
  res = 0
  for j in xrange(peoples):
      cap = int(raw_input())
      res += topDown(0, cap)
  print(res)
  
#fim = time.time()
#print(fim - ini)